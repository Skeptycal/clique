'''
Defines the structure of inbound messages.

@author: Peter Parente <parente@cs.unc.edu>
@copyright: Copyright (c) 2008 Peter Parente
@license: BSD License

All rights reserved. This program and the accompanying materials are made
available under the terms of The BSD License which accompanies this
distribution, and is available at
U{http://www.opensource.org/licenses/bsd-license.php}
'''

import Constants

class InboundMessage(object):
  '''
  Most base input message. Defines the type of message, its name, when it
  occurred, if it was modified by special keystrokes, its intended destination,
  and if it should be skipped from further processing.

  @ivar ResultData: Result of a completion macro returned to the owner task
    of the completed task
  @type ResultData: object
  @ivar UserData: Extra data attached to the message by an observer
  @type UserData: object
  @ivar Stop: Should this message stop immediately (True) or propogate (False)?
  @type Stop: boolean
  @ivar Seen: Has this message been handled by at least one object?
  @type Seen: boolean
  @ivar ID: ID of the event
  @type ID: 2-tuple of number
  @ivar Name: Name of the event
  @type Name: string
  @ivar Time: Time at which the event occurred
  @type Time: number
  @ivar Destination: Object that should this message should be routed to
  @type Destination: object
  @ivar Modified: Bit field of modifier values
  @type Modified: number
  @ivar StartPipe: Starting point for input message routing, or None to mean the
    top of the pipe
  @type StartPipe: object
  '''
  def __init__(self, ID):
    '''
    Initializes an instance.
    
    See instance variables for parameter description.
    '''
    self.ResultData = None
    self.UserData = None
    self.Stop = True
    self.Seen = False
    self.ID = ID
    self.Name = None
    self.Time = 0
    self.Destination = None
    self.Modified = 0
    self.StartPipe = None

  def __eq__(self, o):
    '''
    Determines if this object is equivalent to another message object.
    
    @param o: Object to compare with this message
    @type o: L{Input.Messages.InboundMessage}
    @return: Whether or not the object and this message are equivalent
    @rtype: boolean
    '''
    # check if this message is equal to another message
    if isinstance(o, InboundMessage):
      return o.ID == self.ID
    # or a specific keyboard command
    elif isinstance(o, tuple):
      return o == self.ID
    else:
      return False
      
  def RouteTo(self, dest):
    '''
    Stores a reference to an object that should receive this message without 
    letting it filter through the entire system.
    
    @param dest: Object that should receive the message
    @type dest: object
    '''
    self.Destination = dest
    
  def RouteThrough(self, starting):
    '''
    Stores a reference to the starting point for routing a message. This can be
    used to get messages to last focused L{View}s when some other view has
    the focus.
    
    @param starting: Start of the input pipe through which the message should be
      routed
    @type starting: L{Input.Pipe}
    '''
    self.StartPipe = starting
    
class TextMessage(InboundMessage):
  '''
  Chunk of text sent to a L{View}, typically from the the memory menu.
  
  @ivar Text: Text chunk
  @type Text: string
  '''
  def __init__(self, ID, text):
    '''
    Stores the text chunk. Sets the message ID.
    
    @param text: Text chunk
    @type text: string
    '''
    InboundMessage.__init__(self, ID)
    self.Text = text
    
class KeyMessage(InboundMessage):
  '''
  Real key press generated by the user and captured by the pyHook library. 
  
  @ivar ascii: Character value for the virtual key code
  @type ascii: integer
  @ivar Press: Was the key pressed (True) or released (False)?
  @type Press: boolean
  '''
  def __init__(self, event, modified, press):
    '''
    Grabs important information from the event object and stores it. Stores
    other params.
    
    @param event: Event object from the pyHook package
    @type event: pyHook.KeyboardEvent
    @param modified: Bit field of modifier values
    @type modified: number
    @param press: Was the key pressed (True) or released (False)?
    @type press: boolean
    '''
    InboundMessage.__init__(self, (event.KeyID, event.Extended))
    self.Name = event.Key
    self.Time = event.Time
    self.ascii = event.Ascii
    self.Modified = modified
    self.Press = press
    
  def GetAsciiChar(self):
    '''
    @return: Converts the numeric ASCII value to a character
    @rtype: string
    '''
    if self.ascii == 0:
      return None
    else:
      return chr(self.ascii)
  Char = property(GetAsciiChar)
  
  def GetShift(self):
    '''
    @return: Was shift held when the key was pressed?
    @rtype: boolean
    '''
    return self.Modified & Constants.MOD_SHIFT
  Shift = property(GetShift)
